// src/components/schedule/MiniMonth.jsx
import React, { useMemo } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'moment/locale/es';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { motion } from 'framer-motion';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';

const localizer = momentLocalizer(moment);

// Custom toolbar for mini calendar
const MiniToolbar = ({ label, onNavigate }) => (
  <div className='flex items-center justify-between mb-3 px-1'>
    <motion.button
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
      onClick={() => onNavigate('PREV')}
      className='p-1.5 hover:bg-white/10 rounded-md transition-all group'
    >
      <ChevronLeftIcon className='w-4 h-4 text-gray-400 group-hover:text-gray-200' />
    </motion.button>

    <span className='text-sm font-semibold text-gray-200'>{label}</span>

    <motion.button
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
      onClick={() => onNavigate('NEXT')}
      className='p-1.5 hover:bg-white/10 rounded-md transition-all group'
    >
      <ChevronRightIcon className='w-4 h-4 text-gray-400 group-hover:text-gray-200' />
    </motion.button>
  </div>
);

// Custom date cell wrapper to show event dots
const DateCellWrapper = ({ value, children, events }) => {
  const dayEvents = useMemo(() => {
    const dayStart = moment(value).startOf('day');
    const dayEnd = moment(value).endOf('day');

    return events.filter(event => {
      const eventStart = moment(event.start);
      return eventStart.isBetween(dayStart, dayEnd, null, '[]');
    });
  }, [value, events]);

  const eventCount = dayEvents.length;
  const maxDots = 3;
  const dotsToShow = Math.min(eventCount, maxDots);

  return (
    <div className='relative flex items-center justify-center h-full'>
      {children}
      {eventCount > 0 && (
        <div className='absolute bottom-1 flex justify-center gap-0.5'>
          {Array.from({ length: dotsToShow }).map((_, i) => (
            <span key={i} className='w-1.5 h-1.5 rounded-full bg-accent-500' />
          ))}
          {eventCount > maxDots && <span className='text-xs text-accent-400 ml-0.5'>+</span>}
        </div>
      )}
    </div>
  );
};

export const MiniMonth = ({ currentDate, onNavigate, events = [] }) => {
  moment.locale('es');

  // Memoize date cell wrapper with events
  const dateCellWrapper = useMemo(
    () => props => <DateCellWrapper {...props} events={events} />,
    [events]
  );

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className='relative'
    >
      <div
        className='bg-surface-900/40 backdrop-blur-sm border border-white/10 
                      rounded-xl p-4 shadow-lg'
      >
        {/* Header */}
        <div className='mb-4 pb-3 border-b border-white/10'>
          <h3 className='text-xs font-semibold text-gray-400 uppercase tracking-wider'>
            Navegación Rápida
          </h3>
        </div>

        <div className='mini-calendar'>
          <Calendar
            localizer={localizer}
            date={currentDate || new Date()}
            onNavigate={date => onNavigate(date)}
            defaultView='month'
            toolbar={false}
            selectable
            onSelectSlot={({ start }) => onNavigate(start)}
            style={{ height: 280 }}
            components={{
              toolbar: props => <MiniToolbar {...props} />,
              dateCellWrapper,
            }}
            formats={{
              weekdayFormat: date => localizer.format(date, 'dd').slice(0, 1).toUpperCase(),
              dayFormat: 'D',
              monthHeaderFormat: 'MMMM YYYY',
            }}
            messages={{
              next: 'Siguiente',
              previous: 'Anterior',
              today: 'Hoy',
            }}
          />
        </div>

        {/* Today button */}
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => onNavigate(new Date())}
          className='w-full mt-4 py-2 bg-surface-800/50 hover:bg-surface-800/70
                     text-gray-300 text-sm font-medium rounded-lg border border-white/10
                     hover:border-white/20 transition-all duration-200'
        >
          Ir a Hoy
        </motion.button>
      </div>
    </motion.div>
  );
};
